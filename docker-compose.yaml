version: "3.2"
services:
  celery:
    build:
      context: ./
      dockerfile: ./batch/Dockerfile
    volumes:
      - ./shared:/shared/
    depends_on:
      - broker
      - uploader
    networks:
      network:

  celery-exporter:
    image: danihodovic/celery-exporter
    environment:
      CE_BROKER_URL: redis://broker:6379/1
    ports:
      - "9808:9808"
    depends_on:
      - celery
      - broker
    networks:
      network:

  broker:
    image: redis:latest
    ports:
      - 6379:6379
    networks:
      network:

  uploader:
    build: ./uploader
    volumes:
      - ./uploader:/mnt/
      - ./shared:/shared/
    working_dir: /backend/
    command: python api_commands.py
    depends_on:
      - database
    networks:
      network:
  
  authentication:
    build: ./authentication
    volumes:
      - ./authentication:/mnt/
    working_dir: /backend/
    command: python api_commands.py
    depends_on:
      - database
    networks:
      network:

  database:
    image: postgres
    restart: always
    volumes:
      - ./postgres-db:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data/ifpvdl/
    networks:
      network:
  
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:1234@database:5432/postgres?sslmode=disable"
    links:
      - database
      - prometheus
    networks:
      network:

  nginx:
    image: nginx:latest
    ports:
      - 5000:443
    volumes:
      - ./nginx/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/localhost.crt:/etc/ssl/certs/localhost.crt
      - ./nginx/localhost.key:/etc/ssl/private/localhost.key
    depends_on:
      - uploader
      - authentication
    networks:
      network:

  prometheus:
    image: prom/prometheus:v2.21.0
    ports:
      - 9000:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
    networks:
      network:

  grafana:
    image: grafana/grafana:7.5.7
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    networks:
      network:


networks:
  network:

  
volumes:
  prometheus-data:
  grafana-data:
